<!-- Built with spec-md https://spec-md.com -->
<div>

<div style="color: #333333; font: 13pt/18pt Cambria, 'Palatino Linotype', Palatino, 'Liberation Serif', serif;margin: 6rem auto 3rem;">
<div>
<section id="intro">
<p>Renders Markdown with some additions into an HTML format commonly used for writing technical specification documents. Markdown additions include code syntax highlighting, edit annotations, and the definition of algorithms and grammar productions.</p>
<div>
<h6>Philosophy</h6>
<p>Spec Markdown is first and foremost Markdown. As such, it follows Markdown&rsquo;s philosophy of intending to be as easy to read and easy to write as is feasible.</p>
<p>In order to interoperate with other tools which use Markdown, Spec Markdown tries to add as little additional syntax as possible, instead preferring conventions. This means any documents written with Spec Markdown in mind should render adequately by other Markdown renderers.</p>
<p>To support the rendering additions of Spec Markdown, some features of Markdown may be limited or removed. As an example, Spec Markdown is strict about the order and locations of headers in a document.</p>
<ac:structured-macro ac:name="note">
<ac:rich-text-body>This is not a normative spec for Spec Markdown, but just documentation of this tool. Of course, written in Spec Markdown!</ac:rich-text-body></ac:structured-macro>
</div>
</section>
<h1>Contents</h1><p>&nbsp;</p><ac:structured-macro ac:name="toc">
<ac:parameter ac:name="printable">true</ac:parameter>
<ac:parameter ac:name="indent">20px</ac:parameter>
<ac:parameter ac:name="type">list</ac:parameter>
<ac:parameter ac:name="outline">true</ac:parameter>
<ac:parameter ac:name="style">decimal</ac:parameter>
<ac:parameter ac:name="absoluteUrl">true</ac:parameter>
<ac:parameter ac:name="maxlevel">2</ac:parameter>
<ac:parameter ac:name="exclude">Philosophy|Contents</ac:parameter>
</ac:structured-macro></div>
<div>
<h2>Getting Started</h2>
<p>To use Spec Markdown, just write Markdown files. There are some conventions used by Spec Markdown which you can read about in <a href="#sec-Spec-Additions">Spec additions</a>.</p>
<p>To convert your Markdown files into an HTML spec document, use the <code>spec-md</code> utility.</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">sh</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[npm install -g spec-md
spec-md ./path/to/markdown.md > ./path/to/output.html
]]></ac:plain-text-body></ac:structured-macro><p>You can also require <code>spec-md</code> as a node module.</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">sh</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[npm install --save-dev spec-md
]]></ac:plain-text-body></ac:structured-macro><ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">js</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[var fs = require('fs');
var specMarkdown = require('spec-md');
specMarkdown.html('./path/to/markdown.md').then(function (html) {
  fs.writeFile('./path/to/output.html', html);
});
]]></ac:plain-text-body></ac:structured-macro><p>Spec Markdown also provides utilities for generating and operating on an intermediate representation of the markdown, which you can explore in <a href="#sec-Using-Spec-Markdown">Using Spec Markdown</a>.</p>
</div>
<div>
<h2>Markdown</h2>
<p>Spec Markdown is first and foremost <a href="http://daringfireball.net/projects/markdown/syntax">Markdown</a>. More specifically, it&rsquo;s based on <a href="https://help.github.com/articles/github-flavored-markdown/">Github&#8208;flavored Markdown</a>.</p>
<p>This section explains the syntax and capabilities of Markdown that Spec Markdown supports and augments.</p>
<div>
<h3>Character Encoding</h3>
<p>Markdown allows you to write text which uses &amp;, &lt;, and &gt;. The output HTML will automatically use the <code>&amp;amp;</code>, <code>&amp;lt;</code>, and <code>&amp;gt;</code> entities.</p>
<p>Well formed HTML entities can be written inline directly. If you write <code>&amp;copy;</code>, it will appear in the HTML output as &copy;.</p>
<div>
<h4>Escape sequence</h4>
<p>Markdown makes use of certain characters to format text, in order to render one explicitly, place a backslash before it.</p>
<p>You can type *literal asterisks* instead of emphasis by typing <code>\*literal asterisks\*</code>.</p>
<p>Escaping does not apply within code.</p>
<p>Spec Markdown provides backslash escapes for the following characters:</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[\   backslash
`   backtick
*   asterisk
_   underscore
{}  curly braces
[]  square brackets
()  parentheses
#   hash mark
+   plus sign
-   minus sign (hyphen)
.   dot
!   exclamation mark
<   less-than    <-- added in Spec Markdown
>   greater-than <-- added in Spec Markdown
|   pipe         <-- added in Spec Markdown
]]></ac:plain-text-body></ac:structured-macro></div>
</div>
<div>
<h3>Inline formatting</h3>
<p>Markdown allows for inline stylistic and structual formatting. Inline formatting is allowed in paragraphs, list items, and table cells.</p>
<div>
<h4>Inline HTML</h4>
<p>Markdown is not a replacement for HTML and instead leverages HTML by allowing its use inline within paragraphs, links, etc.</p>
<p>This code has <blink>blinking</blink> and <em>emphasized</em> formatting.</p>
<p>Markdown syntax can continue to be <u>used <em>within</em> inline HTML</u>.</p>
</div>
<div>
<h4>Links</h4>
<p>Use <code>[ ]</code> square brackets to indicate linked text followed immediately by <code>( )</code> parenthesis to describe the URL the text will link to.</p>
<p>The linked text can contain any other inline formatting.</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[This is an [-->*example*<--](https://www.facebook.com) of a link.
]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<p>This is an <a href="https://www.facebook.com">&rarr;<em>example</em>&larr;</a> of a link.</p>
<ac:structured-macro ac:name="note">
<ac:rich-text-body>Links do not yet support a reference style short&#8208;form.</ac:rich-text-body></ac:structured-macro>
<ac:structured-macro ac:name="note">
<ac:rich-text-body>Links do not yet support a title attribute.</ac:rich-text-body></ac:structured-macro>
</div>
<div>
<h4>Emphasis</h4>
<p>Wrapping asterisks <em>(*)</em> indicate emphasis. Like Github&#8208;flavored Markdown, Spec Markdown does not treat underscore <em>(_)</em> as emphasis.</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[Example of **bold** and *italic* and ***bold italic***.
]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<p>Example of <strong>bold</strong> and <em>italic</em> and <strong><em>bold italic</em></strong>.</p>
</div>
<div>
<h4>Inline Code</h4>
<p>Wrapping back&#8208;ticks <em>(`)</em> indicate inline code, text inside back&#8208;ticks is not formatted, allowing for special characters to be used in inline code without escapes.</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[This is an `example` of some inline code.
]]></ac:plain-text-body></ac:structured-macro><p>Produces</p>
<p>This is an <code>example</code> of some inline code.</p>
<ac:structured-macro ac:name="note">
<ac:rich-text-body>Markdown&rsquo;s double&#8208;back&#8208;tick syntax is not yet supported.</ac:rich-text-body></ac:structured-macro>
</div>
<div>
<h4>Images</h4>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[![Specs](http://i.imgur.com/aV8o3rE.png)
]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<p><img src="http://i.imgur.com/aV8o3rE.png" alt="Specs"/></p>
<p>Also, consider using images for support of more complex features like graph diagrams. For example, with Graviso:</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[![How spec-md works](http://g.gravizo.com/svg?
  digraph specmd {
    markdown [shape=box];
    ast [shape=box];
    html [shape=box];
    markdown -> parse [weight=8];
    parse -> ast;
    ast -> print;
    edge [color=red];
    print -> html;
  }
)
]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<p><img src="http://g.gravizo.com/svg?%0A%20%20digraph%20specmd%20%7B%0A%20%20%20%20markdown%20%5Bshape=box%5D;%0A%20%20%20%20ast%20%5Bshape=box%5D;%0A%20%20%20%20html%20%5Bshape=box%5D;%0A%20%20%20%20markdown%20-%3E%20parse%20%5Bweight=8%5D;%0A%20%20%20%20parse%20-%3E%20ast;%0A%20%20%20%20ast%20-%3E%20print;%0A%20%20%20%20edge%20%5Bcolor=red%5D;%0A%20%20%20%20print%20-%3E%20html;%0A%20%20%7D%0A" alt="How spec-md works"/></p>
<ac:structured-macro ac:name="note">
<ac:rich-text-body>the title attribute is not yet supported</ac:rich-text-body></ac:structured-macro>
</div>
</div>
<div>
<h3>Blocks</h3>
<p>Markdown allows for block&#8208;level structual formatting. Every block is seperated by at least two new lines. Spec Markdown makes use of Markdown&rsquo;s blocks to produce more specific structural formatting.</p>
<div>
<h4>Block HTML</h4>
<p>Markdown is not a replacement for HTML and instead leverages HTML by allowing its use as complete blocks when separated from surrounding content by blank lines.</p>
<ac:structured-macro ac:name="note">
<ac:rich-text-body>Markdown formatting syntax is not processed within block&#8208;level HTML tags.</ac:rich-text-body></ac:structured-macro>
<p>For example, to add an HTML table to a Markdown article:</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[Unrelated previous paragraph followed by a blank line

<table>
<tr>
<td>Table cell</td>
<td>

<table>
<tr>
<td>*Tables in tables*</td>
</tr>
</table>

</td>
</tr>
</table>
]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<p>Unrelated previous paragraph followed by a blank line</p>
<table>
<tr>
<td>Table cell</td>
<td>

<table>
<tr>
  <td>*Tables in tables*</td>
</tr>
</table>

</td>
</tr>
</table><p>And using <code>&lt;pre&gt;</code> produces a simple code block:</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[<pre>
Buffalo Bill ’s
defunct
       who used to
       ride a watersmooth-silver
                                stallion
and break onetwothreefourfive pigeonsjustlikethat
                                                 Jesus
he was a handsome man
                     and what i want to know is
how do you like your blueeyed boy
Mister Death
</pre>
]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<pre>
Buffalo Bill ’s
defunct
       who used to
       ride a watersmooth-silver
                                stallion
and break onetwothreefourfive pigeonsjustlikethat
                                                 Jesus
he was a handsome man
                     and what i want to know is
how do you like your blueeyed boy
Mister Death
</pre></div>
<div>
<h4>Section Headers</h4>
<p>Regular Markdown supports two styles of headers, Setext and atx, however Spec Markdown generally only supports atx style headers.</p>
<ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example-1</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example-1"><ac:link-body>Example # 1</ac:link-body></ac:link><ac:structured-macro ac:name="code"><ac:parameter ac:name="title">Example # 1</ac:parameter><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[# Header
]]></ac:plain-text-body></ac:structured-macro><p>Setext headers are not supported by Spec Markdown.</p>
<ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Counter-Example-2</ac:parameter></ac:structured-macro><ac:link ac:anchor="Counter-Example-2"><ac:link-body>Counter Example # 2</ac:link-body></ac:link><ac:structured-macro ac:name="code"><ac:parameter ac:name="title">Counter Example # 2</ac:parameter><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[Header
------
]]></ac:plain-text-body></ac:structured-macro><p>The number of <code>#</code> characters refers to the depth of the section. To produce an, <code>&lt;h3&gt;</code>, type <code>###</code>. Optionally, a header may be &ldquo;closed&rdquo; by any number of <code>#</code> characters.</p>
<ac:structured-macro ac:name="note">
<ac:rich-text-body>Spec Markdown requires that documents start with <code>#</code> and that each section contained within is only one level deeper. An &lt;h1&gt; section may only contain &lt;h2&gt; sections.</ac:rich-text-body></ac:structured-macro>
</div>
<div>
<h4>Paragraphs</h4>
<p>Paragraphs are the most simple Markdown blocks. Lines are appended together to form a single &lt;p&gt; tag. Any inline syntax is allowed within a paragraph.</p>
</div>
<div>
<h4>Lists</h4>
<p>Markdown lists are lines which each start with either a ordered bullet <code>1.</code> or unordered bullet, <code>*</code>, <code>-</code>, or <code>+</code>. Lists are optionally indented by two spaces.</p>
<p>Lists can be nested within other lists by indenting by at least two spaces.</p>
<ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example-3</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example-3"><ac:link-body>Example # 3</ac:link-body></ac:link><ac:structured-macro ac:name="code"><ac:parameter ac:name="title">Example # 3</ac:parameter><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[  1. this
  2. is
  3. a
    - nested
  4. list
]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<ol>
<li>this</li>
<li>is</li>
<li>a<ul>
<li>nested</li>
</ul>
</li>
<li>list</li>
</ol>
</div>
<div>
<h4>Code Block</h4>
<p>A block of code is formed by either indenting by 4 spaces, or wrapping with <code>```</code> on their own lines.</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[```
var code = sample();
```]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[var code = sample();
]]></ac:plain-text-body></ac:structured-macro></div>
<div>
<h4>Block Quotes</h4>
<p>Spec markdown does not yet support Markdown&rsquo;s <code>&gt;</code> style block quotes.</p>
</div>
<div>
<h4>Horizontal Rules</h4>
<p>Spec Markdown does not yet support Markdown&rsquo;s <code>---</code> style &lt;hr&gt;.</p>
</div>
<div>
<h4>Automatic Links</h4>
<p>Spec Markdown does not yet automatically link urls. </p>
</div>
</div>
</div>
<div>
<h2>Spec Additions</h2>
<p>Spec Markdown makes some additions to Markdown to support cases relevant to writing technical specs and documentation. It attempts to be as minimally invasive as possible, leveraging existing Markdown formatting features whenever possible so Spec Markdown documents may render adequately as regular Markdown.</p>
<p>Spec Markdown also makes restrictions to the overall format of the Markdown document in order to derive a structure to the entire document.</p>
<div>
<h3>Link Anything</h3>
<p>Everything unique in a Spec Markdown file has a link created for it. Sections each have a link, as do named <a href="#sec-Algorithms">Algorithms</a> and <a href="#sec-Grammar">Grammar</a>. You&rsquo;ll find that <a href="#sec-Note">Notes</a> and <a href="#sec-Examples">Examples</a> are also given stable links based on their contents, just in case things move around.</p>
<p>However, you can also link <em>anything</em> in a Spec Markdown file. Just highlight any bit of text and a link will be created just for that selection, making referencing specific parts of your document easy. Try it here!</p>
</div>
<div>
<h3>Title and Introduction</h3>
<p>A Spec Markdown document should start with one Setext style header which will be used as the title of the document. Any content before the first atx (<code>#</code>) style header will become the introduction to the document.</p>
<p>A Spec Markdown document starts in this form:</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[Spec Markdown
-------------

Introductory paragraph.

# First Section Header
]]></ac:plain-text-body></ac:structured-macro></div>
<div>
<h3>Sections</h3>
<p>A Spec Markdown document is separated into a sequence and hierarchy of sections. Those sections can then be used as navigation points and can be used to create a table of contents. A section is started by a header and ends at either the next header of similar or greater precedence or the end of the document. A section can contain other sections if their headers are of lower precedence.</p>
<div>
<h4>Section Headers</h4>
<p>Regular Markdown supports two styles of headers, Setext and atx, however Spec Markdown only supports atx style headers as section headers.</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[# Header
]]></ac:plain-text-body></ac:structured-macro><p>Only use Setext style headers for the title of the document.</p>
<ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Counter-Example-4</ac:parameter></ac:structured-macro><ac:link ac:anchor="Counter-Example-4"><ac:link-body>Counter Example # 4</ac:link-body></ac:link><ac:structured-macro ac:name="code"><ac:parameter ac:name="title">Counter Example # 4</ac:parameter><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[Header
------
]]></ac:plain-text-body></ac:structured-macro><p>Spec Markdown also requires that only single <code>#</code> headers appear at the top of a document, and that only a <code>##</code> header (and not a <code>###</code> header) can be contained with the section started by a <code>#</code> header.</p>
</div>
<div>
<h4>Subsection Headers</h4>
<p>While sections are numbered and appear in the table of contents, a subsection is similar but not numbered or in the table of contents.</p>
<div>
<h6>This is a subsection</h6>
<p>The subsection&rsquo;s content appears below the subsection header.</p>
</div>
<div>
<h6>Another subsection</h6>
<p>Sections may contain multiple subsections, but subsections cannot contain sections or subsections.</p>
</div>
</div>
<div>
<h4>Table of Contents</h4>
<p>A table of contents is automatically generated from the hierarchy of sections in the Spec Markdown document.</p>
</div>
<div>
<h4>Section Numbers</h4>
<p>A number is associated with each section, starting with 1. In a hierarchy of sections, the parent sections are joined with dots. This provides an unambiguous location identifier for a given section in a document.</p>
<p>You can specify these section numbers directly in your Markdown documents if you wish by writing them directly after the <code>#</code> and before the text of the header.</p>
<div>
<h5>Custom Numbers</h5>
<p>If the section number is written in the document, the last number will be used as the number for that section. This is useful when writing a proposal against an existing spec and wish to reference a particular section.</p>
<p>The header for this section was written as</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[#### 3.2.3.8. Custom Numbers
]]></ac:plain-text-body></ac:structured-macro></div>
<div>
<h5>Appendix / Annex Sections</h5>
<p>If a top level section is written with a letter, such as <code>A</code> instead of a number, that will begin an Appendix section.</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[# A. Appendix: Grammar
]]></ac:plain-text-body></ac:structured-macro></div>
</div>
</div>
<div>
<h3>Smart Characters</h3>
<p>The Spec Markdown renderer will replace easy to type characters like quotes and dashes with their appropriate typographic entities. These replacements will not occur within blocks of code.</p>
<div>
<h4>Quotes and Dashes</h4>
<p>Prose text has &ldquo;smart quotes&rdquo;, hyphens, en&#8208;dashes and em&#8208;dashes&mdash;you shouldn&rsquo;t have to think about it, they&rsquo;ll just work.</p>
<p>For example, a quote of a quote (with an inner apostrophe and emphasis for flair):</p>
<p><code>&quot;She told me that &#x27;he isn&#x27;t here right *now*&#x27; - so I left.&quot;</code></p>
<p>Will render as:</p>
<p>&ldquo;She told me that&lsquo;he isn&rsquo;t here right <em>now</em>&rsquo; &ndash; so I left.&rdquo;</p>
</div>
<div>
<h4>Math</h4>
<p>Math operators like &ge;, &le;, and &cong; can be written as <code>&gt;=</code>, <code>&lt;=</code>, and <code>~=</code>.</p>
</div>
<div>
<h4>Arrows</h4>
<p>Smart arrows &rarr; and &larr; and &harr; can be written as <code>-&gt;</code>, <code>&lt;-</code> and <code>&lt;-&gt;</code>.</p>
<p>Fat smart arrows &rArr; and &lArr; and &hArr; can be written as <code>=&gt;</code>, <code>&lt;==</code> and <code>&lt;=&gt;</code>.</p>
</div>
<div>
<h4>Additional escape sequence</h4>
<p>Spec Markdown allows escaping &lt; &gt; and | character with <code>\&gt;</code>, <code>\&lt;</code>, and <code>\|</code>.</p>
</div>
<div>
<h4>Tables</h4>
<p>Similar to Github flavored Markdown</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[| This | is a | table |
| ---- | ---- | ----- |
| key  | val  | etc   |
]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<table>
<thead><tr>
<th>This </th>
<th>is a </th>
<th>table </th>
</tr></thead>
<tbody>
<tr>
<td>key </td><td>val </td><td>etc </td></tr>
</tbody>
</table>
<p>Table cells can contain any content that a paragraph can contain.</p>
</div>
</div>
<div>
<h3>Note</h3>
<p>Notes can be written inline with a spec document, and are often helpful to supply non&#8208;normative explanatory text or caveats in a differently formatted style. Case insensitive, the <code>:</code> is optional.</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[Note: Notes are awesome.
]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<ac:structured-macro ac:name="note">
<ac:rich-text-body>Notes are awesome.</ac:rich-text-body></ac:structured-macro>
</div>
<div>
<h3>Todo</h3>
<p>It&rsquo;s often helpful to write a draft of a document and leave &ldquo;to&#8208;do&rdquo; comments in not&#8208;yet&#8208;completed sections. Case insensitive, the <code>:</code> is optional.</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[TODO: finish this section
]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<ac:structured-macro ac:name="note">
<ac:rich-text-body>finish this section</ac:rich-text-body></ac:structured-macro>
<ac:structured-macro ac:name="note">
<ac:rich-text-body>You can also write <code>TK</code> in place of <code>TODO</code>, nerds.</ac:rich-text-body></ac:structured-macro>
</div>
<div>
<h3>Syntax Highlighting</h3>
<p>Spec Markdown will apply syntax highlighting to blocks of code if a github&#8208;flavored&#8208;markdown style language is supplied.</p>
<p>You may provide a <code>highlight</code> function as an option to customize this behavior.</p>
<p>To render this highlighted javascript:</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[```js
var baz = foo("bar");
```]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">js</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[var baz = foo("bar");
]]></ac:plain-text-body></ac:structured-macro><div>
<h4>Examples</h4>
<p>Spec Markdown helps you write examples, visually indicaticating the difference from normative code blocks, and generating permalinks to those examples. Just write <code>example</code> after the <code>```</code>.</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[```example
var great = useOf.example("code");
```]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example-5</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example-5"><ac:link-body>Example # 5</ac:link-body></ac:link><ac:structured-macro ac:name="code"><ac:parameter ac:name="title">Example # 5</ac:parameter><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[var great = useOf.example("code");
]]></ac:plain-text-body></ac:structured-macro><p>Examples can also be syntax highlighted, by placing the language directly before writing <code>example</code>:</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[```js example
var great = useOf.example("code");
```]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example-6</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example-6"><ac:link-body>Example # 6</ac:link-body></ac:link><ac:structured-macro ac:name="code"><ac:parameter ac:name="title">Example # 6</ac:parameter><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">js</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[var great = useOf.example("code");
]]></ac:plain-text-body></ac:structured-macro></div>
<div>
<h4>Counter Examples</h4>
<p>In addition to examples, Spec Markdown helps you write <em>counter&#8208;examples</em>, which are examples of things you should not do. These are visually indicated as different from normative code blocks and other examples. Just write <code>counter-example</code> after the <code>```</code> (and optional language).</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[```js counter-example
var shit = dontSwear();
```]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Counter-Example-7</ac:parameter></ac:structured-macro><ac:link ac:anchor="Counter-Example-7"><ac:link-body>Counter Example # 7</ac:link-body></ac:link><ac:structured-macro ac:name="code"><ac:parameter ac:name="title">Counter Example # 7</ac:parameter><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">js</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[var shit = dontSwear();
]]></ac:plain-text-body></ac:structured-macro></div>
</div>
<div>
<h3>Imports</h3>
<p>When compiled, an import reference will be inlined into the same document. An import reference looks like a link to a &ldquo;.md&rdquo; file as a single paragraph.</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[[AnythingGoesHere](SomeName.md)
]]></ac:plain-text-body></ac:structured-macro><p>You can optionally prefix the import reference with <code>#</code> characters to describe at what section level the import should apply. By default an import reference will be imported as a child of the current section.</p>
</div>
<div>
<h3>Inline editing</h3>
<p>A portion of the <a href="http://criticmarkup.com/">CriticMarkup</a> spec is supported.</p>
<p>For example, we can <ins>add</ins> or <del>remove</del> text with the <code>{++add++}</code> or <code>{--remove--}</code> syntax.</p>
</div>
<div>
<h3>Block editing</h3>
<p>We can also add and remove entire blocks of content, by using <code>{++</code> or <code>{--</code> on their own line with empty lines on either side:</p>
<div class="spec-added"><p>These paragraphs</p>
<p>have been <em>added</em>.</p>
</div>
<p>And</p>
<div class="spec-removed"><p>These paragraphs</p>
<p>have been <em>removed</em>.</p>
</div>
<p>By typing:</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[{++

These paragraphs

have been *added*.

++}

And

{--

These paragraphs

have been *removed*.

--}
]]></ac:plain-text-body></ac:structured-macro><ac:structured-macro ac:name="note">
<ac:rich-text-body>imports and section headers cannot be included in a added or removed section to preserve the ability to render a table of contents.</ac:rich-text-body></ac:structured-macro>
</div>
<div>
<h3>Algorithms</h3>
<p>Specifications for procedures or algorithms can be defined in terms of nested markdown lists. These lists can be of any kind, but will always have ordered formatting. The bullet labeling for algorithms is specific will cycle between decimal, lower&#8208;alpha, and lower&#8208;roman.</p>
<p>An algorithm definition also describes its arguments in terms of variables.</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[Algorithm(arg) :
  1. first
  1. then
    * substep
      * deeper substep
      * another deep substep
    * another step
  1. okay
]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<div class="spec-algo" id="Algorithm()">
<span class="spec-call"><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Algorithm</ac:parameter></ac:structured-macro><ac:link ac:anchor="Algorithm"><ac:link-body>Algorithm</ac:link-body></ac:link>(<var data-name="arg">arg</var>)</span><ol>
<li>first</li>
<li>then<ol>
<li>substep<ol>
<li>deeper substep</li>
<li>another deep substep</li>
</ol>
</li>
<li>another step</li>
</ol>
</li>
<li>okay</li>
</ol>
</div>
</div>
<div>
<h3>Grammar</h3>
<p>Spec Markdown makes it easier to describe context&#8208;free grammatical productions.</p>
<p>Grammars are defined by a sequence of <em>terminal</em> characters or sequence of characters, which are then referenced by <em>non&#8208;terminal</em> rules. The definition of a non&#8208;terminal is referred to as a <em>production</em>.</p>
<div>
<h4>Grammar Production</h4>
<p>The <code>:</code> token indicates an &ldquo;is defined as&rdquo; production for a non&#8208;terminal, where a single definition can be written directly after the <code>:</code>.</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[PBJ : Bread PeanutButter Jelly Bread
]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<div class="spec-production" id="PBJ">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">PBJ</ac:parameter></ac:structured-macro><ac:link ac:anchor="PBJ"><ac:link-body>PBJ</ac:link-body></ac:link></em><span></span></span><div style="margin-left: 2rem;"><span style=""><em>Bread</em><span></span></span><span style=""><em>PeanutButter</em><span></span></span><span style=""><em>Jelly</em><span></span></span><span style=""><em>Bread</em><span></span></span></div>
</div>
<p>Or if <span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">PBJ</ac:parameter></ac:structured-macro><ac:link ac:anchor="PBJ"><ac:link-body>PBJ</ac:link-body></ac:link></em><span></span></span> has definition options, they are written immediately after as a Markdown list.</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[PBJ :
  - Bread PeanutButter Jelly Bread
  - Bread Jelly PeanutButter Bread
]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<div class="spec-production" id="PBJ">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">PBJ</ac:parameter></ac:structured-macro><ac:link ac:anchor="PBJ"><ac:link-body>PBJ</ac:link-body></ac:link></em><span></span></span><div style="margin-left: 2rem;"><span style=""><em>Bread</em><span></span></span><span style=""><em>PeanutButter</em><span></span></span><span style=""><em>Jelly</em><span></span></span><span style=""><em>Bread</em><span></span></span></div>
<div style="margin-left: 2rem;"><span style=""><em>Bread</em><span></span></span><span style=""><em>Jelly</em><span></span></span><span style=""><em>PeanutButter</em><span></span></span><span style=""><em>Bread</em><span></span></span></div>
</div>
<p>Each definition is a space seperated list of <em>terminal</em> or <em>non&#8208;terminal</em> tokens, and may also include conditionals and constraints.</p>
<p>Definition lists aren&rsquo;t required to be indented:</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[PBJ :

- Bread PeanutButter Jelly Bread
- Bread Jelly PeanutButter Bread
]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<div class="spec-production" id="PBJ">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">PBJ</ac:parameter></ac:structured-macro><ac:link ac:anchor="PBJ"><ac:link-body>PBJ</ac:link-body></ac:link></em><span></span></span><div style="margin-left: 2rem;"><span style=""><em>Bread</em><span></span></span><span style=""><em>PeanutButter</em><span></span></span><span style=""><em>Jelly</em><span></span></span><span style=""><em>Bread</em><span></span></span></div>
<div style="margin-left: 2rem;"><span style=""><em>Bread</em><span></span></span><span style=""><em>Jelly</em><span></span></span><span style=""><em>PeanutButter</em><span></span></span><span style=""><em>Bread</em><span></span></span></div>
</div>
</div>
<div>
<h4>Production types</h4>
<p>Often languages wish to specify different types of grammar productions, such as lexical or syntactical, or if certain characters line whitespace or newlines are permitted between symbols in the right&#8208;hand&#8208;side. Spec&#8208;md allows this this distinction based on the number of colons:</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[TypeOne : `type` `one`

TypeTwo :: `type` `two`

TypeThree ::: `type` `three`
]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<div class="spec-production" id="TypeOne">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">TypeOne</ac:parameter></ac:structured-macro><ac:link ac:anchor="TypeOne"><ac:link-body>TypeOne</ac:link-body></ac:link></em><span></span></span><div style="margin-left: 2rem;"><span style="color: rgb(20,20,20);font-family: monospace;"><b>type</b></span><span style="color: rgb(20,20,20);font-family: monospace;"><b>one</b></span></div>
</div>
<div class="spec-production d2" id="TypeTwo">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">TypeTwo</ac:parameter></ac:structured-macro><ac:link ac:anchor="TypeTwo"><ac:link-body>TypeTwo</ac:link-body></ac:link></em><span></span></span><div style="margin-left: 2rem;"><span style="color: rgb(20,20,20);font-family: monospace;"><b>type</b></span><span style="color: rgb(20,20,20);font-family: monospace;"><b>two</b></span></div>
</div>
<div class="spec-production d3" id="TypeThree">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">TypeThree</ac:parameter></ac:structured-macro><ac:link ac:anchor="TypeThree"><ac:link-body>TypeThree</ac:link-body></ac:link></em><span></span></span><div style="margin-left: 2rem;"><span style="color: rgb(20,20,20);font-family: monospace;"><b>type</b></span><span style="color: rgb(20,20,20);font-family: monospace;"><b>three</b></span></div>
</div>
</div>
<div>
<h4>One of</h4>
<p>If each definition option is a single token, it can be expressed as a &ldquo;one of&rdquo; expression instead of a markdown list.</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[AssignmentOperator : one of *= `/=` %= += -= <<= >>= >>>= &= ^= |=
]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<div class="spec-production" id="AssignmentOperator">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">AssignmentOperator</ac:parameter></ac:structured-macro><ac:link ac:anchor="AssignmentOperator"><ac:link-body>AssignmentOperator</ac:link-body></ac:link></em><span></span></span><div class="spec-oneof"><table>
<tr>
<td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>*=</b></span></td><td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>/=</b></span></td><td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>%=</b></span></td><td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>+=</b></span></td><td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>-=</b></span></td><td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>&lt;&lt;=</b></span></td><td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>&gt;&gt;=</b></span></td><td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>&gt;&gt;&gt;=</b></span></td><td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>&amp;=</b></span></td><td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>^=</b></span></td><td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>|=</b></span></td></tr>
</table></div>
</div>
<p>&ldquo;one of&rdquo; can also be followed by a line break and multiple lines of tokens</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[Keyword : one of
  break     do        in          typeof
  case      else      instanceof  var
  catch     export    new         void
  class     extends   return      while
  const     finally   super       with
  continue  for       switch      yield
  debugger  function  this
  default   if        throw
  delete    import    try
]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<div class="spec-production" id="Keyword">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Keyword</ac:parameter></ac:structured-macro><ac:link ac:anchor="Keyword"><ac:link-body>Keyword</ac:link-body></ac:link></em><span></span></span><div class="spec-oneof"><table>
<tr>
<td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>break</b></span></td><td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>do</b></span></td><td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>in</b></span></td><td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>typeof</b></span></td></tr>
<tr>
<td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>case</b></span></td><td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>else</b></span></td><td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>instanceof</b></span></td><td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>var</b></span></td></tr>
<tr>
<td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>catch</b></span></td><td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>export</b></span></td><td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>new</b></span></td><td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>void</b></span></td></tr>
<tr>
<td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>class</b></span></td><td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>extends</b></span></td><td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>return</b></span></td><td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>while</b></span></td></tr>
<tr>
<td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>const</b></span></td><td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>finally</b></span></td><td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>super</b></span></td><td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>with</b></span></td></tr>
<tr>
<td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>continue</b></span></td><td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>for</b></span></td><td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>switch</b></span></td><td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>yield</b></span></td></tr>
<tr>
<td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>debugger</b></span></td><td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>function</b></span></td><td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>this</b></span></td></tr>
<tr>
<td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>default</b></span></td><td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>if</b></span></td><td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>throw</b></span></td></tr>
<tr>
<td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>delete</b></span></td><td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>import</b></span></td><td class="spec-rhs"><span style="color: rgb(20,20,20);font-family: monospace;"><b>try</b></span></td></tr>
</table></div>
</div>
</div>
<div>
<h4>Non Terminal Token</h4>
<p>Non&#8208;terminal tokens with a defined as a grammar production can be referred to in other grammar productions. Non&#8208;terminals must match the regular expression <span style="color: rgb(20,20,20);font-family: monospace;"><b>/[A-Z][_a-zA-Z]*/</b></span>. That is, they must start with an uppercase letter, followed by any number of letters or underscores.</p>
</div>
<div>
<h4>Prose</h4>
<p>Grammars can describe arbitrary rules by using prose within a grammar definition by using <code>&quot;quotes&quot;</code>.</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[Sandwich : Bread "Any kind of topping" Bread
]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<div class="spec-production" id="Sandwich">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Sandwich</ac:parameter></ac:structured-macro><ac:link ac:anchor="Sandwich"><ac:link-body>Sandwich</ac:link-body></ac:link></em><span></span></span><div style="margin-left: 2rem;"><span style=""><em>Bread</em><span></span></span><span style="color: rgb(40,40,40)">Any kind of topping</span><span style=""><em>Bread</em><span></span></span></div>
</div>
</div>
<div>
<h4>Terminal Token</h4>
<p>Terminal tokens refer to a character or sequence of characters. They can be written unadorned in the grammar definition.</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[BalancedParens : ( BalancedParens )
]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<div class="spec-production" id="BalancedParens">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">BalancedParens</ac:parameter></ac:structured-macro><ac:link ac:anchor="BalancedParens"><ac:link-body>BalancedParens</ac:link-body></ac:link></em><span></span></span><div style="margin-left: 2rem;"><span style="color: rgb(20,20,20);font-family: monospace;"><b>(</b></span><span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">BalancedParens</ac:parameter></ac:structured-macro><ac:link ac:anchor="BalancedParens"><ac:link-body>BalancedParens</ac:link-body></ac:link></em><span></span></span><span style="color: rgb(20,20,20);font-family: monospace;"><b>)</b></span></div>
</div>
<p>Any sequence of characters can be written to indicate a terminal token:</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[WhileStatement : while ( Expression ) { Statements }
]]></ac:plain-text-body></ac:structured-macro><p>Produces</p>
<div class="spec-production" id="WhileStatement">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">WhileStatement</ac:parameter></ac:structured-macro><ac:link ac:anchor="WhileStatement"><ac:link-body>WhileStatement</ac:link-body></ac:link></em><span></span></span><div style="margin-left: 2rem;"><span style="color: rgb(20,20,20);font-family: monospace;"><b>while</b></span><span style="color: rgb(20,20,20);font-family: monospace;"><b>(</b></span><span style=""><em>Expression</em><span></span></span><span style="color: rgb(20,20,20);font-family: monospace;"><b>)</b></span><span style="color: rgb(20,20,20);font-family: monospace;"><b>{</b></span><span style=""><em>Statements</em><span></span></span><span style="color: rgb(20,20,20);font-family: monospace;"><b>}</b></span></div>
</div>
<p>Terminals can also be quoted with back&#8208;ticks <code>`</code> to remove any ambiguity from other meanings, for example to allow a terminal token to start with an uppercase letter, or a slash <code>/</code> or backslash <code>\</code>, or later contain a <code>]</code> or <code>}</code>.</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[DivisionExpression : Expression `/` Expression
]]></ac:plain-text-body></ac:structured-macro><p>Produces</p>
<div class="spec-production" id="DivisionExpression">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">DivisionExpression</ac:parameter></ac:structured-macro><ac:link ac:anchor="DivisionExpression"><ac:link-body>DivisionExpression</ac:link-body></ac:link></em><span></span></span><div style="margin-left: 2rem;"><span style=""><em>Expression</em><span></span></span><span style="color: rgb(20,20,20);font-family: monospace;"><b>/</b></span><span style=""><em>Expression</em><span></span></span></div>
</div>
</div>
<div>
<h4>Regular Expression</h4>
<p>When a grammar is intended to be interpretted as a single token and can be clearly written as a regular expression, you can do so directly.</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[UppercaseWord : /[A-Z][a-z]*/
]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<div class="spec-production" id="UppercaseWord">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">UppercaseWord</ac:parameter></ac:structured-macro><ac:link ac:anchor="UppercaseWord"><ac:link-body>UppercaseWord</ac:link-body></ac:link></em><span></span></span><div style="margin-left: 2rem;"><span style="color: rgb(20,20,20);font-family: monospace;"><b>/[A-Z][a-z]*/</b></span></div>
</div>
</div>
<div>
<h4>Quantifiers</h4>
<p>Tokens can be followed by quantifiers to alter their meaning and as a short&#8208;hand for common patterns of optionality and repetition.</p>
<div>
<h6>Optional Tokens</h6>
<p>A subscript suffix <code>Token?</code> renders as <span class="spec-quantified"><span style=""><em>Token</em><span></span></span><span class="spec-quantifiers"><span class="spec-quantifier optional">opt</span></span></span> and is a shorthand for two possible definitions, one including that token and one excluding it.</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[Sentence : Noun Verb Adverb?
]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<div class="spec-production" id="Sentence">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Sentence</ac:parameter></ac:structured-macro><ac:link ac:anchor="Sentence"><ac:link-body>Sentence</ac:link-body></ac:link></em><span></span></span><div style="margin-left: 2rem;"><span style=""><em>Noun</em><span></span></span><span style=""><em>Verb</em><span></span></span><span class="spec-quantified"><span style=""><em>Adverb</em><span></span></span><span class="spec-quantifiers"><span class="spec-quantifier optional">opt</span></span></span></div>
</div>
<p>Which is shorthand for:</p>
<div class="spec-production" id="Sentence">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Sentence</ac:parameter></ac:structured-macro><ac:link ac:anchor="Sentence"><ac:link-body>Sentence</ac:link-body></ac:link></em><span></span></span><div style="margin-left: 2rem;"><span style=""><em>Noun</em><span></span></span><span style=""><em>Verb</em><span></span></span><span style=""><em>Adverb</em><span></span></span></div>
<div style="margin-left: 2rem;"><span style=""><em>Noun</em><span></span></span><span style=""><em>Verb</em><span></span></span></div>
</div>
</div>
<div>
<h6>Token Lists</h6>
<p>A subscript suffix <code>Token+</code> renders as <span class="spec-quantified"><span style=""><em>Token</em><span></span></span><span class="spec-quantifiers"><span class="spec-quantifier list">list</span></span></span> and is shorthand for a list of one or more of that token.</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[Book : Cover Page+ Cover
]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<div class="spec-production" id="Book">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Book</ac:parameter></ac:structured-macro><ac:link ac:anchor="Book"><ac:link-body>Book</ac:link-body></ac:link></em><span></span></span><div style="margin-left: 2rem;"><span style=""><em>Cover</em><span></span></span><span class="spec-quantified"><span style=""><em>Page</em><span></span></span><span class="spec-quantifiers"><span class="spec-quantifier list">list</span></span></span><span style=""><em>Cover</em><span></span></span></div>
</div>
<p>Which, unless your specification document declares otherwise, is shorthand for:</p>
<div class="spec-production" id="Book">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Book</ac:parameter></ac:structured-macro><ac:link ac:anchor="Book"><ac:link-body>Book</ac:link-body></ac:link></em><span></span></span><div style="margin-left: 2rem;"><span style=""><em>Cover</em><span></span></span><span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Page_list</ac:parameter></ac:structured-macro><ac:link ac:anchor="Page_list"><ac:link-body>Page_list</ac:link-body></ac:link></em><span></span></span><span style=""><em>Cover</em><span></span></span></div>
</div>
<div class="spec-production" id="Page_list">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Page_list</ac:parameter></ac:structured-macro><ac:link ac:anchor="Page_list"><ac:link-body>Page_list</ac:link-body></ac:link></em><span></span></span><div style="margin-left: 2rem;"><span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Page_list</ac:parameter></ac:structured-macro><ac:link ac:anchor="Page_list"><ac:link-body>Page_list</ac:link-body></ac:link></em><span></span></span><span style=""><em>Page</em><span></span></span></div>
<div style="margin-left: 2rem;"><span style=""><em>Page</em><span></span></span></div>
</div>
<p>Some specifications may wish to declare <span class="spec-quantified"><span style=""><em>Token</em><span></span></span><span class="spec-quantifiers"><span class="spec-quantifier list">list</span></span></span> as a shorthand for a comma&#8208;separated list, in which case the previous example would be shorthand for:</p>
<div class="spec-production" id="Book">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Book</ac:parameter></ac:structured-macro><ac:link ac:anchor="Book"><ac:link-body>Book</ac:link-body></ac:link></em><span></span></span><div style="margin-left: 2rem;"><span style=""><em>Cover</em><span></span></span><span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Page_list</ac:parameter></ac:structured-macro><ac:link ac:anchor="Page_list"><ac:link-body>Page_list</ac:link-body></ac:link></em><span></span></span><span style=""><em>Cover</em><span></span></span></div>
</div>
<div class="spec-production" id="Page_list">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Page_list</ac:parameter></ac:structured-macro><ac:link ac:anchor="Page_list"><ac:link-body>Page_list</ac:link-body></ac:link></em><span></span></span><div style="margin-left: 2rem;"><span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Page_list</ac:parameter></ac:structured-macro><ac:link ac:anchor="Page_list"><ac:link-body>Page_list</ac:link-body></ac:link></em><span></span></span><span style="color: rgb(20,20,20);font-family: monospace;"><b>,</b></span><span style=""><em>Page</em><span></span></span></div>
<div style="margin-left: 2rem;"><span style=""><em>Page</em><span></span></span></div>
</div>
</div>
<div>
<h6>Optional Lists</h6>
<p>A subscript suffix <code>Token*</code> renders as <span class="spec-quantified"><span style=""><em>Token</em><span></span></span><span class="spec-quantifiers"><span class="spec-quantifier list">list</span><span class="spec-quantifier optional">opt</span></span></span> and is shorthand for an optional list, which describes zero or more of that token.</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[Sandwich : Bread Topping* Bread
]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<div class="spec-production" id="Sandwich">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Sandwich</ac:parameter></ac:structured-macro><ac:link ac:anchor="Sandwich"><ac:link-body>Sandwich</ac:link-body></ac:link></em><span></span></span><div style="margin-left: 2rem;"><span style=""><em>Bread</em><span></span></span><span class="spec-quantified"><span style=""><em>Topping</em><span></span></span><span class="spec-quantifiers"><span class="spec-quantifier list">list</span><span class="spec-quantifier optional">opt</span></span></span><span style=""><em>Bread</em><span></span></span></div>
</div>
<p>Which is shorthand for:</p>
<div class="spec-production" id="Sandwich">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Sandwich</ac:parameter></ac:structured-macro><ac:link ac:anchor="Sandwich"><ac:link-body>Sandwich</ac:link-body></ac:link></em><span></span></span><div style="margin-left: 2rem;"><span style=""><em>Bread</em><span></span></span><span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Topping_list</ac:parameter></ac:structured-macro><ac:link ac:anchor="Topping_list"><ac:link-body>Topping_list</ac:link-body></ac:link></em><span></span></span><span style=""><em>Bread</em><span></span></span></div>
<div style="margin-left: 2rem;"><span style=""><em>Bread</em><span></span></span><span style=""><em>Bread</em><span></span></span></div>
</div>
<div class="spec-production" id="Topping_list">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Topping_list</ac:parameter></ac:structured-macro><ac:link ac:anchor="Topping_list"><ac:link-body>Topping_list</ac:link-body></ac:link></em><span></span></span><div style="margin-left: 2rem;"><span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Topping_list</ac:parameter></ac:structured-macro><ac:link ac:anchor="Topping_list"><ac:link-body>Topping_list</ac:link-body></ac:link></em><span></span></span><span style=""><em>Topping</em><span></span></span></div>
<div style="margin-left: 2rem;"><span style=""><em>Topping</em><span></span></span></div>
</div>
</div>
<div>
<h6>Use with Non-Terminals</h6>
<p>Quantifiers also apply to non&#8208;terminal tokens with the same rules. For example:</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">markdown</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[UnionMembers :
  - UnionMembers | NamedType
  - `|`? NamedType
]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<div class="spec-production" id="UnionMembers">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">UnionMembers</ac:parameter></ac:structured-macro><ac:link ac:anchor="UnionMembers"><ac:link-body>UnionMembers</ac:link-body></ac:link></em><span></span></span><div style="margin-left: 2rem;"><span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">UnionMembers</ac:parameter></ac:structured-macro><ac:link ac:anchor="UnionMembers"><ac:link-body>UnionMembers</ac:link-body></ac:link></em><span></span></span><span style="color: rgb(20,20,20);font-family: monospace;"><b>|</b></span><span style=""><em>NamedType</em><span></span></span></div>
<div style="margin-left: 2rem;"><span class="spec-quantified"><span style="color: rgb(20,20,20);font-family: monospace;"><b>|</b></span><span class="spec-quantifiers"><span class="spec-quantifier optional">opt</span></span></span><span style=""><em>NamedType</em><span></span></span></div>
</div>
<p>However, unquoted non&#8208;terminals may use the <code>*</code>, <code>?</code> and <code>+</code> characters, so always quote the terminal if the intent is to apply a quantifer.</p>
<ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Counter-Example-8</ac:parameter></ac:structured-macro><ac:link ac:anchor="Counter-Example-8"><ac:link-body>Counter Example # 8</ac:link-body></ac:link><ac:structured-macro ac:name="code"><ac:parameter ac:name="title">Counter Example # 8</ac:parameter><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">markdown</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[UnionMembers :
  - UnionMembers | NamedType
  - |? NamedType
]]></ac:plain-text-body></ac:structured-macro><p>Produces the terminal <code>|?</code>, not an optional <code>|</code>:</p>
<div class="spec-production" id="UnionMembers">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">UnionMembers</ac:parameter></ac:structured-macro><ac:link ac:anchor="UnionMembers"><ac:link-body>UnionMembers</ac:link-body></ac:link></em><span></span></span><div style="margin-left: 2rem;"><span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">UnionMembers</ac:parameter></ac:structured-macro><ac:link ac:anchor="UnionMembers"><ac:link-body>UnionMembers</ac:link-body></ac:link></em><span></span></span><span style="color: rgb(20,20,20);font-family: monospace;"><b>|</b></span><span style=""><em>NamedType</em><span></span></span></div>
<div style="margin-left: 2rem;"><span style="color: rgb(20,20,20);font-family: monospace;"><b>|?</b></span><span style=""><em>NamedType</em><span></span></span></div>
</div>
</div>
</div>
<div>
<h4>Conditional Parameters</h4>
<p>It can be a useful short&#8208;hand to provide conditional parameters when defining a non&#8208;terminal token rather than defining two very similar non&#8208;terminals.</p>
<p>A conditional parameter is written in braces <code>Token[Param]</code> and renders as <span style=""><em>Token<span style="font-style: normal;"><sub>[<span style="color: rgb(40,40,40);">Param</span>]</sub></span></em><span></span></span>. When used in definitions is shorthand for two symbol definitions: one appended with that parameter name, the other without.</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[Example[WithCondition] : "Definition TBD"
]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<div class="spec-production" id="Example">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example"><ac:link-body>Example</ac:link-body></ac:link><span style="font-style: normal;"><sub>[<span style="color: rgb(40,40,40);">WithCondition</span>]</sub></span></em><span></span></span><div style="margin-left: 2rem;"><span style="color: rgb(40,40,40)">Definition TBD</span></div>
</div>
<p>Which is shorthand for:</p>
<div class="spec-production" id="Example">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example"><ac:link-body>Example</ac:link-body></ac:link></em><span></span></span><div style="margin-left: 2rem;"><span style="color: rgb(40,40,40)">Definition TBD</span></div>
</div>
<div class="spec-production" id="Example_WithCondition">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example_WithCondition</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example_WithCondition"><ac:link-body>Example_WithCondition</ac:link-body></ac:link></em><span></span></span><div style="margin-left: 2rem;"><span style="color: rgb(40,40,40)">Definition TBD</span></div>
</div>
<p>The conditions are applied at the beginning of a definition for the non&#8208;terminal by prefixing with <code>[if Param]</code> (alternatively <code>[+Param]</code>) or <code>[if not Param]</code> (alternatively <code>[~Param]</code>) to only include the definition when the variant with the conditional parameter is or is not used, respectively.</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[Example[WithCondition] :
  - A
  - [if WithCondition] B
  - [if not WithCondition] C
  - [+WithCondition] D
  - [~WithCondition] E

]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<div class="spec-production" id="Example">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example"><ac:link-body>Example</ac:link-body></ac:link><span style="font-style: normal;"><sub>[<span style="color: rgb(40,40,40);">WithCondition</span>]</sub></span></em><span></span></span><div style="margin-left: 2rem;"><span style=""><em>A</em><span></span></span></div>
<div style="margin-left: 2rem;"><span style="font-size: 85%;">[if WithCondition]</span><span style=""><em>B</em><span></span></span></div>
<div style="margin-left: 2rem;"><span style="font-size: 85%;">[if not WithCondition]</span><span style=""><em>C</em><span></span></span></div>
<div style="margin-left: 2rem;"><span style="font-size: 85%;">[if WithCondition]</span><span style=""><em>D</em><span></span></span></div>
<div style="margin-left: 2rem;"><span style="font-size: 85%;">[if not WithCondition]</span><span style=""><em>E</em><span></span></span></div>
</div>
<p>Which is shorthand for:</p>
<div class="spec-production" id="Example">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example"><ac:link-body>Example</ac:link-body></ac:link></em><span></span></span><div style="margin-left: 2rem;"><span style=""><em>A</em><span></span></span></div>
<div style="margin-left: 2rem;"><span style=""><em>C</em><span></span></span></div>
<div style="margin-left: 2rem;"><span style=""><em>E</em><span></span></span></div>
</div>
<div class="spec-production" id="Example_WithCondition">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example_WithCondition</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example_WithCondition"><ac:link-body>Example_WithCondition</ac:link-body></ac:link></em><span></span></span><div style="margin-left: 2rem;"><span style=""><em>A</em><span></span></span></div>
<div style="margin-left: 2rem;"><span style=""><em>B</em><span></span></span></div>
<div style="margin-left: 2rem;"><span style=""><em>D</em><span></span></span></div>
</div>
<p>The same bracket suffix on a non&#8208;terminal within a rule is shorthand for using that variant of the rule. If the parameter starts with <code>?</code>, that form of the symbol is conditionally used only in the derived production with the same parameter. If the parameter starts with <code>!</code>, that form of the symbol is only used when in the derived production <em>without</em> that parameter.</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[Example[WithCondition] :
  - Example
  - Example[WithCondition]
  - Example[?WithCondition]
  - Example[!WithCondition]
]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<div class="spec-production" id="Example">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example"><ac:link-body>Example</ac:link-body></ac:link><span style="font-style: normal;"><sub>[<span style="color: rgb(40,40,40);">WithCondition</span>]</sub></span></em><span></span></span><div style="margin-left: 2rem;"><span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example"><ac:link-body>Example</ac:link-body></ac:link></em><span></span></span></div>
<div style="margin-left: 2rem;"><span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example"><ac:link-body>Example</ac:link-body></ac:link><span style="font-style: normal;"><sub>[<span style="color: rgb(40,40,40);">WithCondition</span>]</sub></span></em><span></span></span></div>
<div style="margin-left: 2rem;"><span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example"><ac:link-body>Example</ac:link-body></ac:link><span style="font-style: normal;"><sub>[<span style="color: rgb(40,40,40);">?WithCondition</span>]</sub></span></em><span></span></span></div>
<div style="margin-left: 2rem;"><span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example"><ac:link-body>Example</ac:link-body></ac:link><span style="font-style: normal;"><sub>[<span style="color: rgb(40,40,40);">!WithCondition</span>]</sub></span></em><span></span></span></div>
</div>
<p>Which is shorthand for:</p>
<div class="spec-production" id="Example">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example"><ac:link-body>Example</ac:link-body></ac:link></em><span></span></span><div style="margin-left: 2rem;"><span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example"><ac:link-body>Example</ac:link-body></ac:link></em><span></span></span></div>
<div style="margin-left: 2rem;"><span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example_WithCondition</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example_WithCondition"><ac:link-body>Example_WithCondition</ac:link-body></ac:link></em><span></span></span></div>
<div style="margin-left: 2rem;"><span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example"><ac:link-body>Example</ac:link-body></ac:link></em><span></span></span></div>
<div style="margin-left: 2rem;"><span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example_WithCondition</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example_WithCondition"><ac:link-body>Example_WithCondition</ac:link-body></ac:link></em><span></span></span></div>
</div>
<div class="spec-production" id="Example_WithCondition">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example_WithCondition</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example_WithCondition"><ac:link-body>Example_WithCondition</ac:link-body></ac:link></em><span></span></span><div style="margin-left: 2rem;"><span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example"><ac:link-body>Example</ac:link-body></ac:link></em><span></span></span></div>
<div style="margin-left: 2rem;"><span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example_WithCondition</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example_WithCondition"><ac:link-body>Example_WithCondition</ac:link-body></ac:link></em><span></span></span></div>
<div style="margin-left: 2rem;"><span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example_WithCondition</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example_WithCondition"><ac:link-body>Example_WithCondition</ac:link-body></ac:link></em><span></span></span></div>
<div style="margin-left: 2rem;"><span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example"><ac:link-body>Example</ac:link-body></ac:link></em><span></span></span></div>
</div>
<p>Multiple conditional parameters can be used on both the production definition and on non&#8208;terminals within a rule, in which case it is short form for the permutation of all conditions:</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[Example[P, Q] :
  - [if P] `p`
  - [if Q] `q`
  - Example[!P, ?Q]
]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<div class="spec-production" id="Example">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example"><ac:link-body>Example</ac:link-body></ac:link><span style="font-style: normal;"><sub>[<span style="color: rgb(40,40,40);">P</span><span style="color: rgb(40,40,40);">Q</span>]</sub></span></em><span></span></span><div style="margin-left: 2rem;"><span style="font-size: 85%;">[if P]</span><span style="color: rgb(20,20,20);font-family: monospace;"><b>p</b></span></div>
<div style="margin-left: 2rem;"><span style="font-size: 85%;">[if Q]</span><span style="color: rgb(20,20,20);font-family: monospace;"><b>q</b></span></div>
<div style="margin-left: 2rem;"><span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example"><ac:link-body>Example</ac:link-body></ac:link><span style="font-style: normal;"><sub>[<span style="color: rgb(40,40,40);">!P</span><span style="color: rgb(40,40,40);">?Q</span>]</sub></span></em><span></span></span></div>
</div>
<p>Which is shorthand for:</p>
<div class="spec-production" id="Example">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example"><ac:link-body>Example</ac:link-body></ac:link></em><span></span></span><div style="margin-left: 2rem;"><span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example_P</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example_P"><ac:link-body>Example_P</ac:link-body></ac:link></em><span></span></span></div>
</div>
<div class="spec-production" id="Example_P">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example_P</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example_P"><ac:link-body>Example_P</ac:link-body></ac:link></em><span></span></span><div style="margin-left: 2rem;"><span style="color: rgb(20,20,20);font-family: monospace;"><b>p</b></span></div>
<div style="margin-left: 2rem;"><span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example"><ac:link-body>Example</ac:link-body></ac:link></em><span></span></span></div>
</div>
<div class="spec-production" id="Example_Q">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example_Q</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example_Q"><ac:link-body>Example_Q</ac:link-body></ac:link></em><span></span></span><div style="margin-left: 2rem;"><span style="color: rgb(20,20,20);font-family: monospace;"><b>q</b></span></div>
<div style="margin-left: 2rem;"><span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example_P_Q</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example_P_Q"><ac:link-body>Example_P_Q</ac:link-body></ac:link></em><span></span></span></div>
</div>
<div class="spec-production" id="Example_P_Q">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example_P_Q</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example_P_Q"><ac:link-body>Example_P_Q</ac:link-body></ac:link></em><span></span></span><div style="margin-left: 2rem;"><span style="color: rgb(20,20,20);font-family: monospace;"><b>p</b></span></div>
<div style="margin-left: 2rem;"><span style="color: rgb(20,20,20);font-family: monospace;"><b>q</b></span></div>
<div style="margin-left: 2rem;"><span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example_Q</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example_Q"><ac:link-body>Example_Q</ac:link-body></ac:link></em><span></span></span></div>
</div>
<p>Conditional parameters on a usage can be followed by a quantifier.</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[Example[P, ?Q]*
]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<p><span class="spec-quantified"><span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example"><ac:link-body>Example</ac:link-body></ac:link><span style="font-style: normal;"><sub>[<span style="color: rgb(40,40,40);">P</span><span style="color: rgb(40,40,40);">?Q</span>]</sub></span></em><span></span></span><span class="spec-quantifiers"><span class="spec-quantifier list">list</span><span class="spec-quantifier optional">opt</span></span></span></p>
</div>
<div>
<h4>Constraints</h4>
<p>Any token can be followed by &ldquo;but not&rdquo; or &ldquo;but not one of&rdquo; to place a further constraint on the previous token:</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[Example : A B but not foo or bar
]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<div class="spec-production" id="Example">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example"><ac:link-body>Example</ac:link-body></ac:link></em><span></span></span><div style="margin-left: 2rem;"><span style=""><em>A</em><span></span></span><span class="spec-constrained"><span style=""><em>B</em><span></span></span><span style="margin-left: 1ex;"><span style="display: inline-block;font-weight: normal;margin-left: 1ex; color: rgb(40,40,40); font-family: Cambria, 'Palatino Linotype', Palatino, 'Liberation Serif', serif;margin-right: 1ex;">but not</span><span style="color: rgb(20,20,20);font-family: monospace;"><b>foo</b></span><span style="display: inline-block;font-weight: normal;margin-left: 1ex; color: rgb(40,40,40); font-family: Cambria, 'Palatino Linotype', Palatino, 'Liberation Serif', serif;margin-right: 1ex;">or</span><span style="color: rgb(20,20,20);font-family: monospace;"><b>bar</b></span></span></span></div>
</div>
<p>Optionally can mention &ldquo;one of&rdquo;, this will be omitted when rendered. Commas can be used instead of &ldquo;or&rdquo;.</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[Example : A B but not one of foo, bar
]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<div class="spec-production" id="Example">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example"><ac:link-body>Example</ac:link-body></ac:link></em><span></span></span><div style="margin-left: 2rem;"><span style=""><em>A</em><span></span></span><span class="spec-constrained"><span style=""><em>B</em><span></span></span><span style="margin-left: 1ex;"><span style="display: inline-block;font-weight: normal;margin-left: 1ex; color: rgb(40,40,40); font-family: Cambria, 'Palatino Linotype', Palatino, 'Liberation Serif', serif;margin-right: 1ex;">but not</span><span style="color: rgb(20,20,20);font-family: monospace;"><b>foo</b></span><span style="display: inline-block;font-weight: normal;margin-left: 1ex; color: rgb(40,40,40); font-family: Cambria, 'Palatino Linotype', Palatino, 'Liberation Serif', serif;margin-right: 1ex;">or</span><span style="color: rgb(20,20,20);font-family: monospace;"><b>bar</b></span></span></span></div>
</div>
</div>
<div>
<h4>Meta Tokens</h4>
<p>Spec Markdown can specify some tokens which do not consume any characters.</p>
<p>The empty set, written <code>[empty]</code> appears as <span class="spec-empty">[empty]</span> can be used to define a non&#8208;terminal as matching no terminal or non&#8208;terminal tokens.</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[Example : [empty]
]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<div class="spec-production" id="Example">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example"><ac:link-body>Example</ac:link-body></ac:link></em><span></span></span><div style="margin-left: 2rem;"><span class="spec-empty">[empty]</span></div>
</div>
<p>Lookaheads can appear anywhere in a sequence of tokens, and describe additional constraints on the following token.</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[Example :
  - [lookahead token] Token
  - [lookahead ! token] Token
  - [lookahead != token] Token
  - [lookahead NonTerminal] Token
  - [lookahead ! NonTerminal] Token
  - [lookahead != NonTerminal] Token
  - [lookahead {token, set}] Token
  - [lookahead ! {token, set}] Token
  - [lookahead != {token, set}] Token
]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<div class="spec-production" id="Example">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example"><ac:link-body>Example</ac:link-body></ac:link></em><span></span></span><div style="margin-left: 2rem;"><span class="spec-lookahead"><span style="color: rgb(20,20,20);font-family: monospace;"><b>token</b></span></span><span style=""><em>Token</em><span></span></span></div>
<div style="margin-left: 2rem;"><span class="spec-lookahead not"><span style="color: rgb(20,20,20);font-family: monospace;"><b>token</b></span></span><span style=""><em>Token</em><span></span></span></div>
<div style="margin-left: 2rem;"><span class="spec-lookahead not"><span style="color: rgb(20,20,20);font-family: monospace;"><b>token</b></span></span><span style=""><em>Token</em><span></span></span></div>
<div style="margin-left: 2rem;"><span class="spec-lookahead ntset"><span style=""><em>NonTerminal</em><span></span></span></span><span style=""><em>Token</em><span></span></span></div>
<div style="margin-left: 2rem;"><span class="spec-lookahead ntset not"><span style=""><em>NonTerminal</em><span></span></span></span><span style=""><em>Token</em><span></span></span></div>
<div style="margin-left: 2rem;"><span class="spec-lookahead ntset not"><span style=""><em>NonTerminal</em><span></span></span></span><span style=""><em>Token</em><span></span></span></div>
<div style="margin-left: 2rem;"><span class="spec-lookahead set"><span style="color: rgb(20,20,20);font-family: monospace;"><b>token</b></span><span style="color: rgb(20,20,20);font-family: monospace;"><b>set</b></span></span><span style=""><em>Token</em><span></span></span></div>
<div style="margin-left: 2rem;"><span class="spec-lookahead set not"><span style="color: rgb(20,20,20);font-family: monospace;"><b>token</b></span><span style="color: rgb(20,20,20);font-family: monospace;"><b>set</b></span></span><span style=""><em>Token</em><span></span></span></div>
<div style="margin-left: 2rem;"><span class="spec-lookahead set not"><span style="color: rgb(20,20,20);font-family: monospace;"><b>token</b></span><span style="color: rgb(20,20,20);font-family: monospace;"><b>set</b></span></span><span style=""><em>Token</em><span></span></span></div>
</div>
</div>
</div>
<div>
<h3>Grammar Semantics</h3>
<p>Once grammar is defined, it can be useful to define the semantics of the grammar in terms of algorithm steps. A single grammar definition followed by a list is interpretted as a grammar semantic:</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[PBJ : Bread PeanutButter Jelly Bread

* Let {bottomBread} be the result of placing the first {Bread} on the plate.
* Let {pbSpread} be the result of getting {PeanutButter} from the jar.
* Spread {pbSpread} onto {bottomBread}.
* Let {topBread} be the result of placing the last {Bread} on the plate.
* Let {jamSpread} be the result of getting {Jelly} from the jar.
* Spread {jamSpread} onto {topBread}.
* Let {sandwich} be the result of rotating {topBread} 180&deg; and placing on {bottomBread}.
* Return {sandwich}.
]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<div style="margin: 1rem 0 1rem 2rem;">
<span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">PBJ</ac:parameter></ac:structured-macro><ac:link ac:anchor="PBJ"><ac:link-body>PBJ</ac:link-body></ac:link></em><span></span></span><span style="display: inline-block;margin-left: 1ex;"><div style="margin-left: 2rem;"><span style=""><em>Bread</em><span></span></span><span style=""><em>PeanutButter</em><span></span></span><span style=""><em>Jelly</em><span></span></span><span style=""><em>Bread</em><span></span></span></div>
</span><ol>
<li>Let <var data-name="bottomBread">bottomBread</var> be the result of placing the first <span style=""><em>Bread</em><span></span></span> on the plate.</li>
<li>Let <var data-name="pbSpread">pbSpread</var> be the result of <span style=""><em>PeanutButter</em><span></span></span>.</li>
<li>Spread <var data-name="pbSpread">pbSpread</var> onto <var data-name="bottomBread">bottomBread</var>.</li>
<li>Let <var data-name="topBread">topBread</var> be the result of placing the last <span style=""><em>Bread</em><span></span></span> on the plate.</li>
<li>Let <var data-name="jamSpread">jamSpread</var> be the result of <span style=""><em>Jelly</em><span></span></span>.</li>
<li>Spread <var data-name="jamSpread">jamSpread</var> onto <var data-name="topBread">topBread</var>.</li>
<li>Let <var data-name="sandwich">sandwich</var> be the result of rotating <var data-name="topBread">topBread</var> 180&deg; and placing on <var data-name="bottomBread">bottomBread</var>.</li>
<li>Return <var data-name="sandwich">sandwich</var>.</li>
</ol>
</div>
</div>
<div>
<h3>Value Literals</h3>
<p>Value literals allow any text to refer to a value which has semantic meaning in the specification by wrapping it in <code>{ }</code> curly brace characters.</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[I can reference {foo}, {"foo"}, {null}, {true}.
]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<p>I can reference <var data-name="foo">foo</var>, <span class="spec-string">"foo"</span>, <span class="spec-keyword">null</span>, <span class="spec-keyword">true</span>.</p>
<div>
<h6>Variables</h6>
<p>Write <code>{foo}</code> to produce a variable (represented by a &lt;var&gt; tag) like <var data-name="foo">foo</var>.</p>
</div>
<div>
<h6>Keywords</h6>
<p>Some known keywords like <span class="spec-keyword">null</span>, <span class="spec-keyword">undefined</span>, <span class="spec-keyword">true</span> and <span class="spec-keyword">false</span> are rendered as constants instead of variables.</p>
</div>
<div>
<h6>String literal</h6>
<p>Write <code>{&quot;foo&quot;}</code> to produce a string literal like <span class="spec-string">"foo"</span>.</p>
</div>
<div>
<h6>Grammar tokens</h6>
<p>Any grammar token can be written inline, like <code>{Example}</code> to represent the non&#8208;terminal token <span style=""><em><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example"><ac:link-body>Example</ac:link-body></ac:link></em><span></span></span>, <code>{`terminal`}</code> to represent the terminal token <span style="color: rgb(20,20,20);font-family: monospace;"><b>terminal</b></span>. Even meta tokens like <code>{[empty]}</code> for <span class="spec-empty">[empty]</span> and <code>{[lookahead !{ x, y }]}</code> for <span class="spec-lookahead set not"><span style="color: rgb(20,20,20);font-family: monospace;"><b>x</b></span><span style="color: rgb(20,20,20);font-family: monospace;"><b>y</b></span></span>.</p>
</div>
<div>
<h6>Algorithm calls</h6>
<p>A call to an algorithm can be expressed as a value literal:</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[{Algorithm(foo, "string", null)}
]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<p><span class="spec-call"><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Algorithm</ac:parameter></ac:structured-macro><ac:link ac:anchor="Algorithm"><ac:link-body>Algorithm</ac:link-body></ac:link>(<var data-name="foo">foo</var>, <span class="spec-string">"string"</span>, <span class="spec-keyword">null</span>)</span></p>
</div>
</div>
<div>
<h3>Biblio</h3>
<p>By supplying a <code>&quot;biblio&quot;</code> key in a metadata file, you can have Algorithm calls and Non&#8208;terminal tokens which are not defined in this spec to link to where they are defined.</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[spec-md -m metadata.json myspec.md
]]></ac:plain-text-body></ac:structured-macro><p>Where metadata.json includes:</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[{
  "biblio": {
    "http://people.mozilla.org/~jorendorff/es6-draft.html": {
      "Identifier": "#sec-names-and-keywords",
      "PrimaryExpression": "#sec-primary-expression",
      "ReturnIfAbrupt()": "#sec-returnifabrupt",
      "Get()": "#sec-get-o-p"
    }
  }
}
]]></ac:plain-text-body></ac:structured-macro><p>Then referring to these tokens will link out to that page.</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">text</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[MemberExpression : PrimaryExpression . Identifier

  * Let {reference} be the result of evaluating {PrimaryExpression}.
  * Let {propName} be the string value of {Identifier}.
  * Let {value} be {Get(reference, propName)}.
  * {ReturnIfAbrupt(value)}.
  * Return {value}.
]]></ac:plain-text-body></ac:structured-macro><p>Produces the following:</p>
<div style="margin: 1rem 0 1rem 2rem;">
<span style=""><em>MemberExpression</em><span></span></span><span style="display: inline-block;margin-left: 1ex;"><div style="margin-left: 2rem;"><span style=""><em>PrimaryExpression</em><span></span></span><span style="color: rgb(20,20,20);font-family: monospace;"><b>.</b></span><span style=""><em>Identifier</em><span></span></span></div>
</span><ol>
<li>Let <var data-name="reference">reference</var> be the result of evaluating <span style=""><em>PrimaryExpression</em><span></span></span>.</li>
<li>Let <var data-name="propName">propName</var> be the string value of <span style=""><em>Identifier</em><span></span></span>.</li>
<li>Let <var data-name="value">value</var> be <span class="spec-call">Get(<var data-name="reference">reference</var>, <var data-name="propName">propName</var>)</span>.</li>
<li><span class="spec-call">ReturnIfAbrupt(<var data-name="value">value</var>)</span>.</li>
<li>Return <var data-name="value">value</var>. </li>
</ol>
</div>
</div>
</div>
<div>
<h2>Using Spec Markdown</h2>
<p>If installed globally, using <code>spec-md</code> as a shell executable is the easiest way to use Spec Markdown. The <code>spec-md</code> executable expects a filepath to a Markdown document as input and outputs HTML on stdout. Use <code>&gt;</code> to write stdout to a file.</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">sh</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[npm install -g spec-md
spec-md ./path/to/markdown.md > ./path/to/output.html
]]></ac:plain-text-body></ac:structured-macro><p>You can also require <code>spec-md</code> as a node module, after which you might add the <code>spec-md</code> command as a <a href="https://docs.npmjs.com/cli/run-script">node script</a>.</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">sh</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[npm install --save-dev spec-md
]]></ac:plain-text-body></ac:structured-macro><ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">js</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[var fs = require('fs');
var specMarkdown = require('spec-md');
specMarkdown.html('./path/to/markdown.md').then(function (html) {
  fs.writeFile('./path/to/output.html', html);
});
]]></ac:plain-text-body></ac:structured-macro><p>The <code>spec-md</code> node module provides a few functions:</p>
<ul>
<li><span class="spec-call">html(<var data-name="filePath">filePath</var>, <var data-name="options">options</var>)</span> takes a <var data-name="filepath">filepath</var> to a Markdown file and returns a Promise which will resolve to a beautified HTML string. This function is the primary usage of the <code>spec-md</code> module.</li>
<li><span class="spec-call">parse(<var data-name="filePath">filePath</var>)</span> takes a filepath and returns a Promise which will resolve to an AST <em>(Abstract Syntax Tree)</em> representing the contents of the Spec Markdown file, with all imports already inlined.</li>
<li><span class="spec-call">print(<var data-name="ast">ast</var>, <var data-name="options">options</var>)</span> takes an <var data-name="ast">ast</var> produced by parse() and returns an HTML string.</li>
<li><span class="spec-call">visit(<var data-name="ast">ast</var>, <var data-name="visitor">visitor</var>)</span> takes an <var data-name="ast">ast</var> and a <var data-name="visitor">visitor</var>. It walks over the <var data-name="ast">ast</var> in a depth&#8208;first&#8208;traversal calling the <var data-name="visitor">visitor</var> along the way.</li>
</ul>
<div>
<h3>Print Options</h3>
<p>The <span class="spec-call">html(<var data-name="filePath">filePath</var>, <var data-name="options">options</var>)</span> and <span class="spec-call">print(<var data-name="filePath">filePath</var>)</span> functions both take <var data-name="options">options</var> as an optional second argument. These options allow for customization control over the returned HTML, more options may be added in the future.</p>
<ul>
<li><strong>highlight</strong> - a function which is called when blocks of code are encountered, with the first argument as the string of code, the second argument being the language specified. This function should return well formed HTML, complete with escaped special characters.</li>
<li><strong>head</strong> - a string which is inserted in the <code>&lt;head&gt;</code> tag in the returned HTML. Use this to introduce additional meta tags and scripts.</li>
</ul>
</div>
<div>
<h3>Hot rebuilding with nodemon</h3>
<p>The <code>spec-md</code> shell executable follows the <a href="http://www.faqs.org/docs/artu/ch01s06.html">Unix Philosophy</a> of doing one thing and doing it well. Try out <code>nodemon</code> to continuously rebuild the HTML output as you edit the markdown specification:</p>
<ac:structured-macro ac:name="code"><ac:parameter ac:name="theme">Eclipse</ac:parameter><ac:parameter ac:name="linenumbers">true</ac:parameter><ac:parameter ac:name="language">sh</ac:parameter><ac:parameter ac:name="firstline">0001</ac:parameter><ac:parameter ac:name="collapse">false</ac:parameter><ac:plain-text-body><![CDATA[npm install -g nodemon
nodemon --exec "spec-md > ./path/to/output.html" ./path/to/markdown.md
]]></ac:plain-text-body></ac:structured-macro></div>
</div>
<div>
<h2>Contributing to Spec Markdown</h2>
<p>We want to make contributing to this project as easy and transparent as possible. Hopefully this document makes the process for contributing clear and answers any questions you may have. If not, feel free to open an <a href="https://github.com/leebyron/spec-md/issues">Issue</a>.</p>
<div>
<h3>Pull Requests</h3>
<p>All active development of Spec Markdown happens on GitHub. We actively welcome your <a href="https://help.github.com/articles/creating-a-pull-request">pull requests</a>.</p>
<ol>
<li><a href="https://github.com/leebyron/spec-md/">Fork the repo</a> and create your branch from <code>master</code>.</li>
<li>Install all dependencies. (<code>npm install</code>)</li>
<li>If you&rsquo;ve added code, add tests.</li>
<li>If you&rsquo;ve changed APIs, update the documentation.</li>
<li>Run tests and ensure your code passes lint. (<code>npm test</code>)</li>
</ol>
</div>
<div>
<h3>`master` is unsafe</h3>
<p>We will do our best to keep <code>master</code> in good shape, with tests passing at all times. But in order to move fast, we might make API changes that your application might not be compatible with. We will do our best to communicate these changes and always <a href="http://semver.org/">version</a> appropriately so you can lock into a specific version if need be. If any of this is worrysome to you, just use <a href="https://www.npmjs.org/package/spec-md">npm</a>.</p>
</div>
<div>
<h3>Issues</h3>
<p>We use GitHub issues to track public bugs and requests. Please ensure your bug description is clear and has sufficient instructions to be able to reproduce the issue. The best way is to provide a reduced test case on jsFiddle or jsBin.</p>
</div>
<div>
<h3>Coding Style</h3>
<ul>
<li>2 spaces for indentation (no tabs)</li>
<li>80 character line length strongly preferred.</li>
<li>Prefer <code>&#x27;</code> over <code>&quot;</code></li>
<li>Use semicolons;</li>
<li>Trailing commas,</li>
<li>Avd abbr wrds.</li>
</ul>
</div>
<div>
<h3>License</h3>
<p>By contributing to Spec Markdown, you agree that your contributions will be licensed under its MIT license. </p>
</div>
</div>
<div><h1>§Index</h1><ol><li><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Algorithm</ac:parameter></ac:structured-macro><ac:link ac:anchor="Algorithm"><ac:link-body>Algorithm</ac:link-body></ac:link></li><li><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">AssignmentOperator</ac:parameter></ac:structured-macro><ac:link ac:anchor="AssignmentOperator"><ac:link-body>AssignmentOperator</ac:link-body></ac:link></li><li><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">BalancedParens</ac:parameter></ac:structured-macro><ac:link ac:anchor="BalancedParens"><ac:link-body>BalancedParens</ac:link-body></ac:link></li><li><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Book</ac:parameter></ac:structured-macro><ac:link ac:anchor="Book"><ac:link-body>Book</ac:link-body></ac:link></li><li><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">DivisionExpression</ac:parameter></ac:structured-macro><ac:link ac:anchor="DivisionExpression"><ac:link-body>DivisionExpression</ac:link-body></ac:link></li><li><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example"><ac:link-body>Example</ac:link-body></ac:link></li><li><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example_P</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example_P"><ac:link-body>Example_P</ac:link-body></ac:link></li><li><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example_P_Q</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example_P_Q"><ac:link-body>Example_P_Q</ac:link-body></ac:link></li><li><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example_Q</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example_Q"><ac:link-body>Example_Q</ac:link-body></ac:link></li><li><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Example_WithCondition</ac:parameter></ac:structured-macro><ac:link ac:anchor="Example_WithCondition"><ac:link-body>Example_WithCondition</ac:link-body></ac:link></li><li><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Keyword</ac:parameter></ac:structured-macro><ac:link ac:anchor="Keyword"><ac:link-body>Keyword</ac:link-body></ac:link></li><li><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">PBJ</ac:parameter></ac:structured-macro><ac:link ac:anchor="PBJ"><ac:link-body>PBJ</ac:link-body></ac:link></li><li><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Page_list</ac:parameter></ac:structured-macro><ac:link ac:anchor="Page_list"><ac:link-body>Page_list</ac:link-body></ac:link></li><li><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Sandwich</ac:parameter></ac:structured-macro><ac:link ac:anchor="Sandwich"><ac:link-body>Sandwich</ac:link-body></ac:link></li><li><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Sentence</ac:parameter></ac:structured-macro><ac:link ac:anchor="Sentence"><ac:link-body>Sentence</ac:link-body></ac:link></li><li><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">Topping_list</ac:parameter></ac:structured-macro><ac:link ac:anchor="Topping_list"><ac:link-body>Topping_list</ac:link-body></ac:link></li><li><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">TypeOne</ac:parameter></ac:structured-macro><ac:link ac:anchor="TypeOne"><ac:link-body>TypeOne</ac:link-body></ac:link></li><li><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">TypeThree</ac:parameter></ac:structured-macro><ac:link ac:anchor="TypeThree"><ac:link-body>TypeThree</ac:link-body></ac:link></li><li><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">TypeTwo</ac:parameter></ac:structured-macro><ac:link ac:anchor="TypeTwo"><ac:link-body>TypeTwo</ac:link-body></ac:link></li><li><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">UnionMembers</ac:parameter></ac:structured-macro><ac:link ac:anchor="UnionMembers"><ac:link-body>UnionMembers</ac:link-body></ac:link></li><li><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">UppercaseWord</ac:parameter></ac:structured-macro><ac:link ac:anchor="UppercaseWord"><ac:link-body>UppercaseWord</ac:link-body></ac:link></li><li><ac:structured-macro ac:name="anchor"><ac:parameter ac:name="">WhileStatement</ac:parameter></ac:structured-macro><ac:link ac:anchor="WhileStatement"><ac:link-body>WhileStatement</ac:link-body></ac:link></li></ol></div></div>

</div>
